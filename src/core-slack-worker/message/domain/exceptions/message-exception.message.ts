/**
 * Copyright (c) 2025 Marc Ginger. All rights reserved.
 *
 * This file is part of a proprietary NestJS system developed by Marc Ginger.
 * Unauthorized copying, modification, distribution, or use of this file,
 * via any medium, is strictly prohibited and may result in legal action.
 *
 * Confidential and proprietary.
 */

import { IException } from 'src/shared/domain/exceptions';

export const MessageExceptionMessage: Record<string, IException> = {
  userRequiredForOperation: {
    message: `User token is required to perform this operation on Message`,
    description: `Authentication is required to modify Message relationships`,
    code: `USER_REQUIRED_FOR_OPERATION_MESSAGE`,
    exception: `UnauthorizedException`,
    statusCode: 401,
    domain: `true`,
  },
  userRequiredForUpdates: {
    message: `User context is required for Message updates`,
    description: `Authentication is required for property updates on Message`,
    code: `USER_REQUIRED_FOR_UPDATES_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForDeletion: {
    message: `User context is required for Message deletion operations`,
    description: `Authentication is required to delete Message entities`,
    code: `USER_REQUIRED_FOR_DELETION_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForEnable: {
    message: `User context is required for Message enable operations`,
    description: `Authentication is required to enable Message entities`,
    code: `USER_REQUIRED_FOR_ENABLE_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForDisable: {
    message: `User context is required for Message disable operations`,
    description: `Authentication is required to disable Message entities`,
    code: `USER_REQUIRED_FOR_DISABLE_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForStatus: {
    message: `User context is required for Message status updates`,
    description: `Authentication is required to update Message status`,
    code: `USER_REQUIRED_FOR_STATUS_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidStatusValue: {
    message: `Status value is required for Message`,
    description: `A valid status value must be provided when updating Message status`,
    code: `INVALID_STATUS_VALUE_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  cannotDeactivateDefault: {
    message: `Cannot deactivate a default message. Please set another message as default first.`,
    description: `Business rule violation: default entities cannot be deactivated without setting another as default`,
    code: `CANNOT_DEACTIVATE_DEFAULT_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 409,
    domain: `true`,
  },
  cannotSetInactiveAsDefault: {
    message: `Cannot set an inactive message as default. Please activate the message first.`,
    description: `Business rule violation: inactive entities cannot be set as default`,
    code: `CANNOT_SET_INACTIVE_AS_DEFAULT_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 409,
    domain: `true`,
  },
  fieldConfigCodeRequired: {
    message: `Config code is required and cannot be empty`,
    description: `The config_code field is required for Message and must be a non-empty string`,
    code: `INVALID_CONFIG_CODE_VALUE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldChannelRequired: {
    message: `Channel is required and cannot be empty`,
    description: `The channel field is required for Message and must be a non-empty string`,
    code: `INVALID_CHANNEL_VALUE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldStatusRequired: {
    message: `Status is required`,
    description: `The status field is required for Message`,
    code: `INVALID_STATUS_VALUE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldRetryCountRequired: {
    message: `Retry count is required`,
    description: `The retry_count field is required for Message and must be a valid number`,
    code: `INVALID_RETRY_COUNT_VALUE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldIdRequired: {
    message: `Id is required and cannot be empty`,
    description: `This error occurs when creating a MessageIdentifier with an invalid id value.`,
    code: `FIELD_ID_REQUIRED_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldIdEmpty: {
    message: `Id cannot be empty or whitespace`,
    description: `This error occurs when creating a MessageIdentifier with an empty or whitespace-only id value.`,
    code: `FIELD_ID_EMPTY_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidRecordOfInputType: {
    message: `Invalid input type for Message record conversion`,
    description: `This error occurs when trying to convert a string to a Record<string, IMessage> in toRecordOfMessages function.`,
    code: `INVALID_RECORD_OF_INPUT_TYPE_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidArrayOfInputType: {
    message: `Invalid input type for Message array conversion`,
    description: `This error occurs when trying to convert a string to an array of IMessage in toArrayOfMessages function.`,
    code: `INVALID_ARRAY_OF_INPUT_TYPE_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidStringConversion: {
    message: `Cannot convert string to Message without valid identifier`,
    description: `This error occurs when trying to convert a string to IMessage but no valid string identifier column is available.`,
    code: `INVALID_STRING_CONVERSION_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidInputTypeForConversion: {
    message: `Invalid input type for Message conversion`,
    description: `This error occurs when trying to convert a string to IMessage in toMessage function when string conversion is not supported.`,
    code: `INVALID_INPUT_TYPE_FOR_CONVERSION_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredConfigCode: {
    message: `ConfigCode is required and cannot be null or undefined`,
    description: `This error occurs when validating a Message and the required field configCode is missing or null.`,
    code: `REQUIRED_CONFIG_CODE_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredChannel: {
    message: `Channel is required and cannot be null or undefined`,
    description: `This error occurs when validating a Message and the required field channel is missing or null.`,
    code: `REQUIRED_CHANNEL_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredStatus: {
    message: `Status is required and cannot be null or undefined`,
    description: `This error occurs when validating a Message and the required field status is missing or null.`,
    code: `REQUIRED_STATUS_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredRetryCount: {
    message: `RetryCount is required and cannot be null or undefined`,
    description: `This error occurs when validating a Message and the required field retryCount is missing or null.`,
    code: `REQUIRED_RETRY_COUNT_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  emptyRetryCountArray: {
    message: `RetryCount array cannot be empty`,
    description: `This error occurs when validating a Message and the retryCount array is empty when it should contain values.`,
    code: `EMPTY_RETRY_COUNT_ARRAY_FOR_MESSAGE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredToCreateMessage: {
    message: `User token is required to create a message`,
    description: `This error occurs when a user tries to create a message without providing a valid user token.`,
    code: `USER_REQUIRED_TO_CREATE_MESSAGE`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  propsRequiredToCreateMessage: {
    message: `Properties are required to create a message`,
    description: `This error occurs when a user tries to create a message without providing the required properties object.`,
    code: `PROPS_REQUIRED_TO_CREATE_MESSAGE`,
    exception: `BadRequestException`,
    domain: `true`,
    statusCode: 400,
  },
  userRequiredToUpdateMessage: {
    message: `User token is required to update a message`,
    description: `This error occurs when a user tries to update a message without providing a valid user token.`,
    code: `USER_REQUIRED_TO_UPDATE_MESSAGE`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  MessageUserRequired: {
    message: `User token is required for this operation on message`,
    description: `This error occurs when a user tries to perform an operation on message without providing a valid user token.`,
    code: `USER_REQUIRED_FOR_OPERATION_MESSAGE`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  idRequiredMessage: {
    message: `Valid id is required for this operation on message`,
    description: `This error occurs when a user tries to perform an operation on message without providing a valid id.`,
    code: `ID_REQUIRED_FOR_OPERATION_MESSAGE`,
    exception: `BadRequestException`,
    domain: `true`,
    statusCode: 400,
  },
  notImplemented: {
    message: `This operation is not implemented for Message`,
    description: `The requested operation is not yet implemented for Message entities`,
    code: `NOT_IMPLEMENTED_MESSAGE`,
    exception: `NotImplementedException`,
    statusCode: 501,
    domain: `true`,
  },
  notFound: {
    message: `Message not found`,
    description: `The requested Message entity could not be found in the system`,
    code: `MESSAGE_NOT_FOUND`,
    exception: `NotFoundException`,
    statusCode: 404,
    domain: `true`,
  },
  createError: {
    message: `Invalid Message details creating an item`,
    description: `The provided Message details are invalid or incomplete for creation`,
    code: `INVALID_MESSAGE_CREATE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
  updateError: {
    message: `Invalid Message details updating an item`,
    description: `The provided Message details are invalid or incomplete for update`,
    code: `INVALID_MESSAGE_UPDATE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
  deleteError: {
    message: `Invalid Message details for deleting an item`,
    description: `The provided Message details are invalid or the entity cannot be deleted due to business rules`,
    code: `INVALID_MESSAGE_DELETE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidScheduledAtDate: {
    message: `Invalid scheduled date provided`,
    description: `The scheduled date must be a valid Date object and not NaN`,
    code: `INVALID_SCHEDULED_AT_DATE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  scheduledAtMustBeInFuture: {
    message: `Scheduled date must be in the future`,
    description: `The scheduled date must be after the current time`,
    code: `SCHEDULED_AT_MUST_BE_IN_FUTURE`,
    exception: `MessageDomainException`,
    statusCode: 400,
    domain: `true`,
  },
};
