/**
 * Copyright (c) 2025 Marc Ginger. All rights reserved.
 *
 * This file is part of a proprietary NestJS system developed by Marc Ginger.
 * Unauthorized copying, modification, distribution, or use of this file,
 * via any medium, is strictly prohibited and may result in legal action.
 *
 * Confidential and proprietary.
 */

import { IException } from 'src/shared/domain/exceptions';

export const TransactionExceptionMessage: Record<string, IException> = {
  userRequiredForOperation: {
    message: `User context is required for Transaction operations`,
    description: `Authentication is required to modify Transaction state`,
    code: `USER_REQUIRED_FOR_OPERATION_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForUpdates: {
    message: `User context is required for Transaction updates`,
    description: `Authentication is required for property updates on Transaction`,
    code: `USER_REQUIRED_FOR_UPDATES_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForDeletion: {
    message: `User context is required for Transaction deletion operations`,
    description: `Authentication is required to delete Transaction entities`,
    code: `USER_REQUIRED_FOR_DELETION_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForEnable: {
    message: `User context is required for Transaction enable operations`,
    description: `Authentication is required to enable Transaction entities`,
    code: `USER_REQUIRED_FOR_ENABLE_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForDisable: {
    message: `User context is required for Transaction disable operations`,
    description: `Authentication is required to disable Transaction entities`,
    code: `USER_REQUIRED_FOR_DISABLE_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForStatus: {
    message: `User context is required for Transaction status updates`,
    description: `Authentication is required to update Transaction status`,
    code: `USER_REQUIRED_FOR_STATUS_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidStatusValue: {
    message: `Status value is required for Transaction`,
    description: `A valid status value must be provided when updating Transaction status`,
    code: `INVALID_STATUS_VALUE_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  cannotDeactivateDefault: {
    message: `Cannot deactivate a default transaction. Please set another transaction as default first.`,
    description: `Business rule violation: default entities cannot be deactivated without setting another as default`,
    code: `CANNOT_DEACTIVATE_DEFAULT_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 409,
    domain: `true`,
  },
  cannotSetInactiveAsDefault: {
    message: `Cannot set an inactive transaction as default. Please activate the transaction first.`,
    description: `Business rule violation: inactive entities cannot be set as default`,
    code: `CANNOT_SET_INACTIVE_AS_DEFAULT_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 409,
    domain: `true`,
  },
  fieldFromRequired: {
    message: `From is required and cannot be empty`,
    description: `The from field is required for Transaction and must be a non-empty string`,
    code: `INVALID_FROM_VALUE`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldToRequired: {
    message: `To is required and cannot be empty`,
    description: `The to field is required for Transaction and must be a non-empty string`,
    code: `INVALID_TO_VALUE`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldAmountRequired: {
    message: `Amount is required`,
    description: `The amount field is required for Transaction and must be a valid number`,
    code: `INVALID_AMOUNT_VALUE`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldIdRequired: {
    message: `Id is required and cannot be empty`,
    description: `This error occurs when creating a TransactionIdentifier with an invalid id value.`,
    code: `FIELD_ID_REQUIRED_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldIdEmpty: {
    message: `Id cannot be empty or whitespace`,
    description: `This error occurs when creating a TransactionIdentifier with an empty or whitespace-only id value.`,
    code: `FIELD_ID_EMPTY_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidRecordOfInputType: {
    message: `Invalid input type for Transaction record conversion`,
    description: `This error occurs when trying to convert a string to a Record<string, ITransaction> in toRecordOfTransactions function.`,
    code: `INVALID_RECORD_OF_INPUT_TYPE_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidArrayOfInputType: {
    message: `Invalid input type for Transaction array conversion`,
    description: `This error occurs when trying to convert a string to an array of ITransaction in toArrayOfTransactions function.`,
    code: `INVALID_ARRAY_OF_INPUT_TYPE_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidStringConversion: {
    message: `Cannot convert string to Transaction without valid identifier`,
    description: `This error occurs when trying to convert a string to ITransaction but no valid string identifier column is available.`,
    code: `INVALID_STRING_CONVERSION_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidInputTypeForConversion: {
    message: `Invalid input type for Transaction conversion`,
    description: `This error occurs when trying to convert a string to ITransaction in toTransaction function when string conversion is not supported.`,
    code: `INVALID_INPUT_TYPE_FOR_CONVERSION_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredFrom: {
    message: `From is required and cannot be null or undefined`,
    description: `This error occurs when validating a Transaction and the required field from is missing or null.`,
    code: `REQUIRED_FROM_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredTo: {
    message: `To is required and cannot be null or undefined`,
    description: `This error occurs when validating a Transaction and the required field to is missing or null.`,
    code: `REQUIRED_TO_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredAmount: {
    message: `Amount is required and cannot be null or undefined`,
    description: `This error occurs when validating a Transaction and the required field amount is missing or null.`,
    code: `REQUIRED_AMOUNT_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  emptyAmountArray: {
    message: `Amount array cannot be empty`,
    description: `This error occurs when validating a Transaction and the amount array is empty when it should contain values.`,
    code: `EMPTY_AMOUNT_ARRAY_FOR_TRANSACTION`,
    exception: `TransactionDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredToCreateTransaction: {
    message: `User token is required to create a transaction`,
    description: `This error occurs when a user tries to create a transaction without providing a valid user token.`,
    code: `USER_REQUIRED_TO_CREATE_TRANSACTION`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  propsRequiredToCreateTransaction: {
    message: `Properties are required to create a transaction`,
    description: `This error occurs when a user tries to create a transaction without providing the required properties object.`,
    code: `PROPS_REQUIRED_TO_CREATE_TRANSACTION`,
    exception: `BadRequestException`,
    domain: `true`,
    statusCode: 400,
  },
  TransactionUserRequired: {
    message: `User token is required for this operation on transaction`,
    description: `This error occurs when a user tries to perform an operation on transaction without providing a valid user token.`,
    code: `USER_REQUIRED_FOR_OPERATION_TRANSACTION`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  idRequiredTransaction: {
    message: `Valid id is required for this operation on transaction`,
    description: `This error occurs when a user tries to perform an operation on transaction without providing a valid id.`,
    code: `ID_REQUIRED_FOR_OPERATION_TRANSACTION`,
    exception: `BadRequestException`,
    domain: `true`,
    statusCode: 400,
  },
  notImplemented: {
    message: `This operation is not implemented for Transaction`,
    description: `The requested operation is not yet implemented for Transaction entities`,
    code: `NOT_IMPLEMENTED_TRANSACTION`,
    exception: `NotImplementedException`,
    statusCode: 501,
    domain: `true`,
  },
  notFound: {
    message: `Transaction not found`,
    description: `The requested Transaction entity could not be found in the system`,
    code: `TRANSACTION_NOT_FOUND`,
    exception: `NotFoundException`,
    statusCode: 404,
    domain: `true`,
  },
  createError: {
    message: `Invalid Transaction details creating an item`,
    description: `The provided Transaction details are invalid or incomplete for creation`,
    code: `INVALID_TRANSACTION_CREATE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
  updateError: {
    message: `Invalid Transaction details updating an item`,
    description: `The provided Transaction details are invalid or incomplete for update`,
    code: `INVALID_TRANSACTION_UPDATE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
  deleteError: {
    message: `Invalid Transaction details for deleting an item`,
    description: `The provided Transaction details are invalid or the entity cannot be deleted due to business rules`,
    code: `INVALID_TRANSACTION_DELETE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
};
