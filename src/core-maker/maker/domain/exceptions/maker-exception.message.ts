/**
 * Copyright (c) 2025 Marc Ginger. All rights reserved.
 *
 * This file is part of a proprietary NestJS system developed by Marc Ginger.
 * Unauthorized copying, modification, distribution, or use of this file,
 * via any medium, is strictly prohibited and may result in legal action.
 *
 * Confidential and proprietary.
 */

import { IException } from 'src/shared/domain/exceptions';

export const MakerExceptionMessage: Record<string, IException> = {
  userRequiredForOperation: {
    message: `User token is required to perform this operation on Maker`,
    description: `Authentication is required to modify Maker relationships`,
    code: `USER_REQUIRED_FOR_OPERATION_MAKER`,
    exception: `UnauthorizedException`,
    statusCode: 401,
    domain: `true`,
  },
  userRequiredForUpdates: {
    message: `User context is required for Maker updates`,
    description: `Authentication is required for property updates on Maker`,
    code: `USER_REQUIRED_FOR_UPDATES_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForDeletion: {
    message: `User context is required for Maker deletion operations`,
    description: `Authentication is required to delete Maker entities`,
    code: `USER_REQUIRED_FOR_DELETION_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForEnable: {
    message: `User context is required for Maker enable operations`,
    description: `Authentication is required to enable Maker entities`,
    code: `USER_REQUIRED_FOR_ENABLE_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForDisable: {
    message: `User context is required for Maker disable operations`,
    description: `Authentication is required to disable Maker entities`,
    code: `USER_REQUIRED_FOR_DISABLE_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredForStatus: {
    message: `User context is required for Maker status updates`,
    description: `Authentication is required to update Maker status`,
    code: `USER_REQUIRED_FOR_STATUS_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidStatusValue: {
    message: `Status value is required for Maker`,
    description: `A valid status value must be provided when updating Maker status`,
    code: `INVALID_STATUS_VALUE_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  cannotDeactivateDefault: {
    message: `Cannot deactivate a default maker. Please set another maker as default first.`,
    description: `Business rule violation: default entities cannot be deactivated without setting another as default`,
    code: `CANNOT_DEACTIVATE_DEFAULT_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 409,
    domain: `true`,
  },
  cannotSetInactiveAsDefault: {
    message: `Cannot set an inactive maker as default. Please activate the maker first.`,
    description: `Business rule violation: inactive entities cannot be set as default`,
    code: `CANNOT_SET_INACTIVE_AS_DEFAULT_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 409,
    domain: `true`,
  },
  fieldFromRequired: {
    message: `From is required and cannot be empty`,
    description: `The from field is required for Maker and must be a non-empty string`,
    code: `INVALID_FROM_VALUE`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldToRequired: {
    message: `To is required and cannot be empty`,
    description: `The to field is required for Maker and must be a non-empty string`,
    code: `INVALID_TO_VALUE`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldStatusRequired: {
    message: `Status is required`,
    description: `The status field is required for Maker`,
    code: `INVALID_STATUS_VALUE`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldIdRequired: {
    message: `Id is required and cannot be empty`,
    description: `This error occurs when creating a MakerIdentifier with an invalid id value.`,
    code: `FIELD_ID_REQUIRED_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  fieldIdEmpty: {
    message: `Id cannot be empty or whitespace`,
    description: `This error occurs when creating a MakerIdentifier with an empty or whitespace-only id value.`,
    code: `FIELD_ID_EMPTY_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidRecordOfInputType: {
    message: `Invalid input type for Maker record conversion`,
    description: `This error occurs when trying to convert a string to a Record<string, IMaker> in toRecordOfMakers function.`,
    code: `INVALID_RECORD_OF_INPUT_TYPE_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidArrayOfInputType: {
    message: `Invalid input type for Maker array conversion`,
    description: `This error occurs when trying to convert a string to an array of IMaker in toArrayOfMakers function.`,
    code: `INVALID_ARRAY_OF_INPUT_TYPE_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidStringConversion: {
    message: `Cannot convert string to Maker without valid identifier`,
    description: `This error occurs when trying to convert a string to IMaker but no valid string identifier column is available.`,
    code: `INVALID_STRING_CONVERSION_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  invalidInputTypeForConversion: {
    message: `Invalid input type for Maker conversion`,
    description: `This error occurs when trying to convert a string to IMaker in toMaker function when string conversion is not supported.`,
    code: `INVALID_INPUT_TYPE_FOR_CONVERSION_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredFrom: {
    message: `From is required and cannot be null or undefined`,
    description: `This error occurs when validating a Maker and the required field from is missing or null.`,
    code: `REQUIRED_FROM_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredTo: {
    message: `To is required and cannot be null or undefined`,
    description: `This error occurs when validating a Maker and the required field to is missing or null.`,
    code: `REQUIRED_TO_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  requiredStatus: {
    message: `Status is required and cannot be null or undefined`,
    description: `This error occurs when validating a Maker and the required field status is missing or null.`,
    code: `REQUIRED_STATUS_FOR_MAKER`,
    exception: `MakerDomainException`,
    statusCode: 400,
    domain: `true`,
  },
  userRequiredToCreateMaker: {
    message: `User token is required to create a maker`,
    description: `This error occurs when a user tries to create a maker without providing a valid user token.`,
    code: `USER_REQUIRED_TO_CREATE_MAKER`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  propsRequiredToCreateMaker: {
    message: `Properties are required to create a maker`,
    description: `This error occurs when a user tries to create a maker without providing the required properties object.`,
    code: `PROPS_REQUIRED_TO_CREATE_MAKER`,
    exception: `BadRequestException`,
    domain: `true`,
    statusCode: 400,
  },
  userRequiredToUpdateMaker: {
    message: `User token is required to update a maker`,
    description: `This error occurs when a user tries to update a maker without providing a valid user token.`,
    code: `USER_REQUIRED_TO_UPDATE_MAKER`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  MakerUserRequired: {
    message: `User token is required for this operation on maker`,
    description: `This error occurs when a user tries to perform an operation on maker without providing a valid user token.`,
    code: `USER_REQUIRED_FOR_OPERATION_MAKER`,
    exception: `UnauthorizedException`,
    domain: `true`,
    statusCode: 401,
  },
  idRequiredMaker: {
    message: `Valid id is required for this operation on maker`,
    description: `This error occurs when a user tries to perform an operation on maker without providing a valid id.`,
    code: `ID_REQUIRED_FOR_OPERATION_MAKER`,
    exception: `BadRequestException`,
    domain: `true`,
    statusCode: 400,
  },
  notImplemented: {
    message: `This operation is not implemented for Maker`,
    description: `The requested operation is not yet implemented for Maker entities`,
    code: `NOT_IMPLEMENTED_MAKER`,
    exception: `NotImplementedException`,
    statusCode: 501,
    domain: `true`,
  },
  notFound: {
    message: `Maker not found`,
    description: `The requested Maker entity could not be found in the system`,
    code: `MAKER_NOT_FOUND`,
    exception: `NotFoundException`,
    statusCode: 404,
    domain: `true`,
  },
  createError: {
    message: `Invalid Maker details creating an item`,
    description: `The provided Maker details are invalid or incomplete for creation`,
    code: `INVALID_MAKER_CREATE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
  updateError: {
    message: `Invalid Maker details updating an item`,
    description: `The provided Maker details are invalid or incomplete for update`,
    code: `INVALID_MAKER_UPDATE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
  deleteError: {
    message: `Invalid Maker details for deleting an item`,
    description: `The provided Maker details are invalid or the entity cannot be deleted due to business rules`,
    code: `INVALID_MAKER_DELETE_DETAILS`,
    exception: `BadRequestException`,
    statusCode: 400,
    domain: `true`,
  },
};
